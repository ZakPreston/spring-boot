properties([pipelineTriggers([githubPush()])])

def ARTIFACT_GROUP_ID
def ARTIFACT_ID
def ARTIFACT_PACKAGING

pipeline {
    agent any

    tools {
        maven "maven"
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "Spring2020"
        NEXUS_CREDENTIAL_ID = "Nexus"

        GIT_URL = "https://github.com/ZakPreston/spring-boot.git"
    }

    stages {
        stage('Checkout') {
            steps {
                // GIT submodule recursive checkout
                checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: '*/2.1.x']],
                        userRemoteConfigs: [[url:GIT_URL]]
                ]
            }
        }        
        
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -version"
                sh "mvn clean install -f ./spring-boot-samples/spring-boot-sample-web-ui/pom.xml"
            }
        }

        stage("Publish") {
            steps {
                script {
                    pom = readMavenPom file: "spring-boot-samples/spring-boot-sample-web-ui/pom.xml";
                    
                    ARTIFACT_GROUP_ID = pom.parent.groupId
                    ARTIFACT_ID = pom.artifactId
 
                    ARTIFACT_PACKAGING = pom.packaging
                    filesByGlob = findFiles(glob: "spring-boot-samples/spring-boot-sample-web-ui/target/*.${pom.packaging}");
                    
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    
                    artifactPath = filesByGlob[0].path;

                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.parent.groupId}, packaging: ${pom.packaging}, version ${BUILD_NUMBER}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: ARTIFACT_GROUP_ID,
                            version: BUILD_NUMBER,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: ARTIFACT_ID,
                                classifier: '',
                                file: artifactPath,
                                type: ARTIFACT_PACKAGING],
                                [artifactId: ARTIFACT_ID,
                                classifier: '',
                                file: "spring-boot-samples/spring-boot-sample-web-ui/pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        
        stage('Deploy') {        
            steps {
                script {
					pom = readMavenPom file: "spring-boot-samples/spring-boot-sample-web-ui/pom.xml";
					repoPath =  "${ARTIFACT_GROUP_ID}".replace(".", "/") + "/${ARTIFACT_ID}"
					echo repoPath
					artifactUrl = "http://${NEXUS_URL}/repository/ansible-meetup/${repoPath}/${BUILD_NUMBER}/${ARTIFACT_ID}-${BUILD_NUMBER}.${ARTIFACT_PACKAGING}"
					echo artifactUrl
					withEnv(["ARTIFACT_URL=${artifactUrl}", "APP_NAME=${pom.artifactId}"]) {
						echo "The URL is ${env.ARTIFACT_URL} and the app name is ${env.APP_NAME}"

						// install galaxy roles
						//sh "ansible-galaxy install -vvv -r provision/requirements.yml -p provision/roles/"
						sh "ITEA | ansible-playbook ./spring-boot-samples/spring-boot-sample-web-ui/Deployment/deployment.yml -i ./spring-boot-samples/spring-boot-sample-web-ui/Deployment/hosts -l epam-ci"

						//ansiblePlaybook colorized: true,
						//credentialsId: 'devops',
						//limit: "${HOST_PROVISION}",
						//limit: "epam-ci",
						//installation: 'ansible',
						//inventory: 'provision/inventory.ini',
						//playbook: '~/Deployment/deployment.yml',
						//sudo: true,
						//sudoUser: 'devops'
					}
                }
            }
        }
    }
}
